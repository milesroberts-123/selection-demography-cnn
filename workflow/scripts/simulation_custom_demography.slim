initialize() {
	initializeMutationRate(mu*Q);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral mutation
	initializeMutationType("m2", h, "f", 0.0); // introduced mutation
	initializeMutationType("m3", hB, "e", bBar); // background beneficial mutations (hitchhickers, hill-robertson interference)
	initializeMutationType("m4", hU, "g", uBar, alpha); // background deleterious mutations
	initializeGenomicElementType("g1", c(m1,m3,m4), c(M,B,U));
	initializeGenomicElement(g1, 0, 100000);
	initializeRecombinationRate(R*Q);
	initializeGeneConversion(ncf, cl, fsimple);
}

1 early() {
	// save this run's identifier, used to save and restore
	defineConstant("simID", ID);

	// print all parameters for this simulation
	catn(simID + ": "+ sim.cycle + " - SCALING FACTOR: " + Q);
	catn(simID + ": "+ sim.cycle + " - MUTATION RATE: " + mu + " SCALED: " + mu*Q);
	catn(simID + ": "+ sim.cycle + " - RECOMBINATION RATE: " + R + " SCALED: " + R*Q);
	catn(simID + ": "+ sim.cycle + " - SELECTION COEFFICIENT: " + sweepS + " SCALED: " + sweepS*Q);
	catn(simID + ": "+ sim.cycle + " - DOMINANCE COEFFICIENT: " + h);
	catn(simID + ": "+ sim.cycle + " - SELFING RATE: " + sigma);
	catn(simID + ": "+ sim.cycle + " - INITIAL POPULATION SIZE: " + N + " SCALED: " + asInteger(N/Q));
	catn(simID + ": "+ sim.cycle + " - ESTABLISHMENT FREQUENCY: " + f0);
	catn(simID + ": "+ sim.cycle + " - THRESHOLD FREQUENCY: " + f1);
	catn(simID + ": "+ sim.cycle + " - SWEEP INTRODUCTION TIME: " + kappa + " SCALED:" + asInteger(kappa/Q));
	catn(simID + ": "+ sim.cycle + " - SAMPLING TIME POST-BURN-IN: " + tau + " SCALED: " + asInteger(tau/Q));
	catn(simID + ": "+ sim.cycle + " - NUMBER OF SWEEP MUTATIONS: " + n);
	catn(simID + ": "+ sim.cycle + " - AVERAGE WAIT TIME BETWEEN MUTATIONS: " + lambda + " SCALED: " + lambda/Q);
	catn(simID + ": "+ sim.cycle + " - AVERAGE EFFECT OF BACKGROUND BENEFICIAL MUTATION: " + bBar + " SCALED: " + bBar*Q);
	catn(simID + ": "+ sim.cycle + " - DOMINANCE COEFFICIENT OF BACKGROUND BENEFICIAL MUTATION: " + hB);
	catn(simID + ": "+ sim.cycle + " - AVERAGE EFFECT OF BACKGROUND DELETERIOUS MUTATION: " + uBar + " SCALED: " + uBar*Q);
	catn(simID + ": "+ sim.cycle + " - DOMINANCE COEFFICIENT OF BACKGROUND DELETERIOUS MUTATION: " + hU);
	catn(simID + ": "+ sim.cycle + " - SHAPE PARAMETER OF BACKGROUND DELETERIOUS MUTATION DFE: " + alpha);
	catn(simID + ": "+ sim.cycle + " - PROPORTION OF BACKGROUND MUTATIONS THAT ARE NEUTRAL: " + M);
	catn(simID + ": "+ sim.cycle + " - PROPORTION OF BACKGROUND MUTATIONS THAT ARE DELETERIOUS: " + U);
	catn(simID + ": "+ sim.cycle + " - PROPORTION OF BACKGROUND MUTATIONS THAT ARE BENEFICIAL: " + B);
	catn(simID + ": "+ sim.cycle + " - PROPORTION OF RECOMBINATION EVENTS THAT AREN'T CROSS-OVERS: " + ncf);
	catn(simID + ": "+ sim.cycle + " - MEAN LENGTH OF COPY IN GENE CONVERSION EVENT: " + cl);
	catn(simID + ": "+ sim.cycle + " - PROPORTION OF COPY TRACTS THAT ARE SIMPLE: " + fsimple);

	// create subpopulation
	catn(simID + ": "+ sim.cycle + " - CREATING POPULATION OF SIZE: " + asInteger(N/Q));
	sim.addSubpop("p1", asInteger(N/Q));

	// set selfing rate
	p1.setSelfingRate(sigma);

	// set variable to track when beneficial mutation first fixes
	// need defineGlobal to have variable be visible in other scopes
	defineGlobal("fixTracker", 0);

	// track number of simulation failures (i.e. lost sweep mutations) before success occurs (sweep fixes)
	defineGlobal("fails", 0);

	// track when burn-in and simulation ends
	defineGlobal("endBurn", 10*asInteger(N/Q));
	defineGlobal("simEnd", endBurn + asInteger(tau/Q));
	catn(simID + ": "+ sim.cycle + " - BURN-IN WILL END AT: " + endBurn);
	catn(simID + ": "+ sim.cycle + " - SIMULATION WILL END AT: " + simEnd);

	// Load in file specifying custom 1-population demography
	lines = readFile("../config/demography.csv"); 
	lines = lines[substr(lines, 0, 1) != "//"]; 
  
	population_sizes = c();
	time_steps = c();

	for (line in lines) { 
		fields = strsplit(line, ","); 
		population_size = asInteger(asInteger(fields[0])/Q); 
		time_step = asInteger(asInteger(fields[1])/Q);

		community.registerEarlyEvent(NULL, s5.source, time_step + endBurn, time_step + endBurn);
		
		population_sizes = c(population_sizes, population_size);
		time_steps = c(time_steps, time_step);
	}

	catn(simID + ": "+ sim.cycle + " - GENERATIONS POST-BURN-IN TO CHANGE POPULATION SIZES: " + paste(time_steps));
	catn(simID + ": "+ sim.cycle + " - CORRESPONDING POPULATION SIZES: " + paste(population_sizes));

	defineGlobal("population_sizes", population_sizes);
	defineGlobal("time_steps", time_steps);

	// vector to track harmonic mean of population sizes
	//defineGlobal("nx", 0);

	// generate schedule for beneficial mutations
	gens = cumSum(rpois(asInteger(n), lambda/Q)); // make a vector of start gens

	gens = gens + (endBurn - min(gens)) + 1 + asInteger(kappa/Q); // align to start after burning, plus one to avoid weird ordering, plus kappa to alter timing of introduction relative to burn-in

	catn(simID + ": "+ sim.cycle + " - GENERATIONS TO ADD SWEEPS: " + paste(gens));
	defineConstant("Z", max(gens)); // remember the last gen, used to check for establishment
	defineConstant("Y", min(gens)); // remember the first gen, used for calculating fixation time
	catn(simID + ": "+ sim.cycle + " - GENERATION TO CHECK FOR ESTABLISHMENT: " + Z);

	for (gen in gens) {
		community.registerLateEvent(NULL, s1.source, gen, gen);
	}

	// reschedule saving of simulation to be after burn-in, but before benefical mutation is introduced
	community.rescheduleScriptBlock(s0, start=Y-1, end=Y-1);

	// reschedule checking of establishment for soft sweep mutation
	community.rescheduleScriptBlock(s2, start=Y, end=Y + 100000000);

	// reschedule checking of threshold for partial sweep mutation
	community.rescheduleScriptBlock(s3, start=Y, end=Y + 100000000);

	// reschedule checking of fixation until after beneficial mutation is introduced
	community.rescheduleScriptBlock(s4, start=Y, end=Y + 100000000);

	// reschedule changing of population size
	//community.rescheduleScriptBlock(s5, start=endBurn + 1, end=endBurn + 100000000);

	// reschedule tracking of reciprocal of population sizes
	// community.rescheduleScriptBlock(s6, start=endBurn + 1, end=endBurn + 100000000);
}

// Every 1000 generations, output the heterozygosity and number of mutations in the population
early() {
        if(sim.cycle % 1000 == 0){
                pi = calcHeterozygosity(p1.genomes);
                numM1 = size(sim.mutationsOfType(m1));
                numM2 = size(sim.mutationsOfType(m2));
                numM3 = size(sim.mutationsOfType(m3));
                numM4 = size(sim.mutationsOfType(m4));
                catn(simID + ": " + sim.cycle + " - HETEROZYGOSITY: " + pi + " POPULATION SIZE: " + p1.individualCount +" NEUTRAL: " + numM1 + " SWEEP: " + numM2 + " BACKGROUND GOOD: " + numM3 + " BACKGROUND BAD: " + numM4);
        }
}

// save state of simulation after burn-in
s0 100000000 late(){	
	// save the state of the simulation
	cat(simID + ": " + sim.cycle + " - SAVING STATE\n");
	sim.outputFull(tempdir() + "slim_" + simID + ".txt");
}

// Track reciprocal of population sizes
// change population size
s5 100000000 early() {
	catn(simID + ": " + sim.cycle + " - GENERATIONS POST-BURN-IN:" + paste(sim.cycle - endBurn));
	newSize = population_sizes[which(time_steps == (sim.cycle - endBurn))];
	p1.setSubpopulationSize(newSize);
        catn(simID + ": " + sim.cycle + " - POPULATION SIZE: " + newSize);
}

// introduce the sweep mutation in middle of simulated region
s1 100000000 late() {
	catn(simID + ": " + sim.cycle +  " - INTRODUCING BENEFICIAL MUTATION");
	target = sample(p1.genomes, 1); 
	mut = sim.mutationsOfType(m2); 
	if (mut.size() > 0) {
		target.addMutations(mut);
	} 
	else {
		target.addNewDrawnMutation(m2, 50000);
	}
}

// check if beneficial mutation (currently neutral) is established yet
// once established, convert to beneficial mutation
s2 2000000 late() { 
	mut = sim.mutationsOfType(m2); 
	if (size(mut) == 1) { 
		if (sim.mutationFrequencies(NULL, mut) >= f0) { 
			catn(simID + ": " + sim.cycle + " - ESTABLISHED - CONVERTING TO BENEFICIAL"); 
			mut.setSelectionCoeff(sweepS*Q); 
			//community.deregisterScriptBlock(self);
			community.rescheduleScriptBlock(self,100000000,100000000); 
		} 
	}
}


// check if mutation (currently beneficial) has reached threshold frequency
// once threshold is reached, convert beneficial mutation to neutral
s3 3000000 late() {
        mut = sim.mutationsOfType(m2);
        if (size(mut) == 1) {
                if (sim.mutationFrequencies(NULL, mut) >= f1) {
                        catn(simID + ": " + sim.cycle + " - THRESHOLD REACHED â€“ CONVERTING TO NEUTRAL");
                        mut.setSelectionCoeff(0.0);
                        //community.deregisterScriptBlock(self);
			community.rescheduleScriptBlock(self,100000000,100000000); 
                }
        }
}

// Track reciprocal of population sizes
//s6 5000000 late(){
//	defineGlobal("nx",  nx + 1/p1.individualCount);
//        if (sim.countOfMutationsOfType(m2) == 0){
//                fixed = (sum(sim.substitutions.mutationType == m2) == 1);
//                if (fixed){
//			community.rescheduleScriptBlock(self,100000000,100000000);
//		}
//	}
//}
 
// check for fixation of beneficial mutation
s4 4000000 late() {

	if (sim.countOfMutationsOfType(m2) == 0){
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);

		if (fixed){
			// first generation that mutation fixed
			if (fixTracker == 0){
				catn(simID + ": " + sim.cycle + " - FIXED");
				defineGlobal("fixTime", asInteger(sim.cycle) - asInteger(Y));
				catn(simID + ": " + sim.cycle + " - START: " + Y + " END: " + sim.cycle + " FIXATION TIME: " + fixTime + " SCALED FIXATION TIME: " + fixTime*Q);
			}

			// stop simulation after fixation and simulation reached present day
			if ( sim.cycle == simEnd ){
				catn(simID + ": " + sim.cycle + " - STOPPED GENERATIONS POST-FIXATION : " + fixTracker + " SCALED:" + fixTracker*Q);

				// random sample of individuals from simulation
				catn(simID + ": " + sim.cycle + " - RANDOMLY SAMPLING POPULATION");
				g = p1.sampleIndividuals(128).genomes;
	
				// output sampled genomes as VCF
				catn(simID + ": " + sim.cycle + " - OUTPUTTING VCF");
				g.outputVCF(filePath = "slim_" + asString(ID) + ".vcf", simplifyNucleotides=F, outputNonnucleotides=T);

				// output when sweep fixed
				//catn(simID + ": " + sim.cycle + " - OUTPUTTING FIXATION TIME");
				//writeFile("fix_time_" + asString(ID) + ".txt", paste(fixTime));

				// output number of failures, if any
				catn(simID + ": " + sim.cycle + " - FAILURE COUNT: " + fails);
				// writeFile("fails_" + asString(ID) + ".txt", paste(fails));

				// output harmonic mean of population size
				// catn(simID + ": " + sim.cycle + " - HARMONIC MEAN Ne: " + fixTime/nx);

				catn(simID + ": " + sim.cycle + " - SIMULATION FINISHED! :)");
				sim.simulationFinished();
			}

			// increment tracker of generations post-fixation
			fixTracker = fixTracker + 1;
		}

		else {
			if (sim.cycle > Z) {
				fails = fails + 1; // increment fail counter
				catn(simID + ": " + sim.cycle + " - SWEEP LOST - RESTARTING - FAILS: " + fails);

				// go back to tick before sweep introduced
				sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");

				// start a newly seeded run
				setSeed(rdunif(1, 0, asInteger(2^62) - 1));
				catn(simID + ": " + sim.cycle + " - NEW SEED: " + getSeed());

				// re-register frequency checks for next cycle
				community.rescheduleScriptBlock(s2, start=Y, end=Y + 100000000);
				community.rescheduleScriptBlock(s3, start=Y, end=Y + 100000000);
			}
		}
	}

	else {
		if ( (sim.cycle == simEnd) & (sim.countOfMutationsOfType(m2) == 1) ){
                                fails = fails + 1; // increment fail counter
                                catn(simID + ": " + sim.cycle + " - SWEEP STILL SEGREGATING AT TIME OF SAMPLING - RESTARTING - FAILS: " + fails);

                                // go back to tick before sweep introduced
                                sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");

                                // start a newly seeded run
                                setSeed(rdunif(1, 0, asInteger(2^62) - 1));
                                catn(simID + ": " + sim.cycle + " - NEW SEED: " + getSeed());

                                // re-register frequency checks for next cycle
                                community.rescheduleScriptBlock(s2, start=Y, end=Y + 100000000);
                                community.rescheduleScriptBlock(s3, start=Y, end=Y + 100000000);
		}

		if (fails >= 10000) {
			catn(simID + ": " + sim.cycle + " - STOPPING SIMULATION BECAUSE OF EXCESSIVE SWEEP FAILURE - FAILS: " + fails);
                
			// random sample of individuals from simulation
			catn(simID + ": " + sim.cycle + " - RANDOMLY SAMPLING POPULATION");
			g = p1.sampleIndividuals(128).genomes;

			// output sampled genomes as VCF
			catn(simID + ": " + sim.cycle + " - OUTPUTTING VCF");
			g.outputVCF(filePath = "slim_" + asString(ID) + ".vcf", simplifyNucleotides=F, outputNonnucleotides=T);
			sim.simulationFinished();
		}
	}
}
