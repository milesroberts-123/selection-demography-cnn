initialize() {
	initializeMutationRate(mu);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral mutation
	initializeMutationType("m2", h, "f", 0.0); // introduced mutation
	initializeMutationType("m3", hB, "e", bBar); // background beneficial mutations (hitchhickers, hill-robertson interference)
	initializeMutationType("m4", hU, "g", uBar, alpha); // background deleterious mutations
	initializeGenomicElementType("g1", c(m1,m3,m4), c(M,B,U));
	initializeGenomicElement(g1, 0, 1000000);
	initializeRecombinationRate(R);
	initializeGeneConversion(ncf, cl, fsimple);
}

1 early() {
	// print all parameters for this simulation
	catn("MUTATION RATE: " + mu);
	catn("RECOMBINATION RATE: " + R);
	catn("SELECTION COEFFICIENT: " + sweepS);
	catn("DOMINANCE COEFFICIENT: " + h);
	catn("SELFING RATE: " + sigma);
	catn("GROWTH RATE: " + r);
	catn("CARRYING CAPACITY: " + K);
	catn("INITIAL POPULATION SIZE: " + N);
	catn("ESTABLISHMENT FREQUENCY: " + f0);
	catn("THRESHOLD FREQUENCY: " + f1);
	catn("SWEEP AGE: " + tau);
	catn("NUMBER OF SWEEP MUTATIONS: " + n);
	catn("AVERAGE WAIT TIME BETWEEN MUTATIONS: " + lambda);
	catn("AVERAGE EFFECT OF BACKGROUND BENEFICIAL MUTATION: " + bBar);
	catn("DOMINANCE COEFFICIENT OF BACKGROUND BENEFICIAL MUTATION: " + hB);
	catn("AVERAGE EFFECT OF BACKGROUND DELETERIOUS MUTATION: " + uBar);
	catn("DOMINANCE COEFFICIENT OF BACKGROUND DELETERIOUS MUTATION: " + hU);
	catn("SHAPE PARAMETER OF BACKGROUND DELETERIOUS MUTATION DFE: " + alpha);
	catn("PROPORTION OF BACKGROUND MUTATIONS THAT ARE NEUTRAL: " + M);
	catn("PROPORTION OF BACKGROUND MUTATIONS THAT ARE DELETERIOUS: " + U);
	catn("PROPORTION OF BACKGROUND MUTATIONS THAT ARE BENEFICIAL: " + B);
	catn("PROPORTION OF RECOMBINATION EVENTS THAT AREN'T CROSS-OVERS: " + ncf);
	catn("MEAN LENGTH OF COPY IN GENE CONVERSION EVENT: " + cl);
	catn("PROPORTION OF COPY TRACTS THAT ARE SIMPLE: " + fsimple);

	// save this run's identifier, used to save and restore
	defineConstant("simID", ID);

	// create subpopulation
	sim.addSubpop("p1", asInteger(N));

	// set selfing rate
	p1.setSelfingRate(sigma);

	// set variable to track when beneficial mutation first fixes
	// need defineGlobal to have variable be visible in other scopes
	defineGlobal("fixTracker", 0);

	// track number of simulation failures (i.e. lost sweep mutations) before success occurs (sweep fixes)
	defineGlobal("fails", 0);

	// track when burn-in phase ends
	defineGlobal("endBurn", 10*asInteger(N));

	// vector to track harmonic mean of population sizes
	defineGlobal("nx", 0);

	// generate schedule for beneficial mutations
	gens = cumSum(rpois(asInteger(n), lambda)); // make a vector of start gens

	gens = gens + (endBurn - min(gens)) + 1; // align to start after burning, plus one to avoid weird ordering

	catn(simID + ": "+ sim.cycle + " - GENERATIONS TO ADD SWEEPS: " + paste(gens));
	defineConstant("Z", max(gens)); // remember the last gen
	catn(simID + ": "+ sim.cycle + " - GENERATION TO CHECK FOR ESTABLISHMENT: " + Z);

	for (gen in gens) {
		community.registerLateEvent(NULL, s1.source, gen, gen);
	}

	// reschedule saving of simulation after burn-in
	community.rescheduleScriptBlock(s0, start=endBurn, end=endBurn);

	// reschedule checking of establishment for soft sweep mutation
	community.rescheduleScriptBlock(s2, start=endBurn + 1, end=endBurn + 1000000);

	// reschedule checking of threshold for partial sweep mutation
	community.rescheduleScriptBlock(s3, start=endBurn + 1, end=endBurn + 1000000);

	// reschedule checking of fixation until after beneficial mutation is introduced
	community.rescheduleScriptBlock(s4, start=endBurn + 1, end=endBurn + 1000000);

	// reschedule changing of population size
	community.rescheduleScriptBlock(s5, start=endBurn + 1, end=endBurn + 1000000);

	// reschedule tracking of reciprocal of population sizes
	community.rescheduleScriptBlock(s6, start=endBurn + 1, end=endBurn + 1000000);
}

// Every 1000 generations, output the heterozygosity and number of mutations in the population
early() {
        if(sim.cycle % 1000 == 0){
                pi = calcHeterozygosity(p1.genomes);
                numM1 = size(sim.mutationsOfType(m1));
                numM2 = size(sim.mutationsOfType(m2));
                numM3 = size(sim.mutationsOfType(m3));
                numM4 = size(sim.mutationsOfType(m4));
                catn(simID + ": " + sim.cycle + " HETEROZYGOSITY: " + pi + " NEUTRAL: " + numM1 + " SWEEP: " + numM2 + " BACKGROUND GOOD: " + numM3 + " BACKGROUND BAD: " + numM4);
        }
}

// save state of simulation after burn-in
s0 1000000 late(){	
	// save the state of the simulation
	cat(simID + ": " + sim.cycle + " - SAVING STATE\n");
	sim.outputFull(tempdir() + "slim_" + simID + ".txt");
}

// Track reciprocal of population sizes
// change population size
s5 1000000 early() {
	newSize = asInteger(r*(1 - p1.individualCount/K)*p1.individualCount + p1.individualCount); 
	p1.setSubpopulationSize(newSize);
        catn(simID + ": " + sim.cycle + " - POPULATION SIZE: " + newSize);
	if(newSize == p1.individualCount){
		community.rescheduleScriptBlock(self, 1000000, 1000000);
	}
}

// introduce the sweep mutation in middle of simulated region
s1 1000000 late() {
	catn(simID + ": " + sim.cycle +  " - INTRODUCING BENEFICIAL MUTATION");
	target = sample(p1.genomes, 1); 
	mut = sim.mutationsOfType(m2); 
	if (mut.size() > 0) {
		target.addMutations(mut);
	} 
	else {
		target.addNewDrawnMutation(m2, 500000);
	}
}

// check if beneficial mutation (currently neutral) is established yet
// once established, convert to beneficial mutation
s2 2000000 late() { 
	mut = sim.mutationsOfType(m2); 
	if (size(mut) == 1) { 
		if (sim.mutationFrequencies(NULL, mut) >= f0) { 
			catn(simID + ": " + sim.cycle + " - ESTABLISHED - CONVERTING TO BENEFICIAL"); 
			mut.setSelectionCoeff(sweepS); 
			//community.deregisterScriptBlock(self);
			community.rescheduleScriptBlock(self,1000000,1000000); 
		} 
	} 	
}


// check if mutation (currently beneficial) has reached threshold frequency
// once threshold is reached, convert beneficial mutation to neutral
s3 3000000 late() {
        mut = sim.mutationsOfType(m2);
        if (size(mut) == 1) {
                if (sim.mutationFrequencies(NULL, mut) >= f1) {
                        catn(simID + ": " + sim.cycle + " - THRESHOLD REACHED â€“ CONVERTING TO NEUTRAL");
                        mut.setSelectionCoeff(0.0);
                        //community.deregisterScriptBlock(self);
			community.rescheduleScriptBlock(self,1000000,1000000); 
                }
        }
}

// Track reciprocal of population sizes
s6 5000000 late(){
	defineGlobal("nx",  nx + 1/p1.individualCount);
        if (sim.countOfMutationsOfType(m2) == 0){
                fixed = (sum(sim.substitutions.mutationType == m2) == 1);
                if (fixed){
			community.rescheduleScriptBlock(self,1000000,1000000);
		}
	}

}
 
// check for fixation of beneficial mutation
s4 4000000 late() {

	if (sim.countOfMutationsOfType(m2) == 0){
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);

		if (fixed){
			// first generation that mutation fixed
			if (fixTracker == 0){
				catn(simID + ": " + sim.cycle + " - FIXED");
				defineGlobal("fixTime", asInteger(sim.cycle) - asInteger(endBurn));
				catn(simID + ": " + sim.cycle + " START: " + endBurn + " END: " + sim.cycle + " FIXATION TIME: " + fixTime);
			}

			// stop some generations after fixation
			if (fixTracker == tau){
				catn(simID + ": " + sim.cycle + " - STOPPED ");

				// random sample of individuals from simulation
				catn(simID + ": " + sim.cycle + " RANDOMLY SAMPLING POPULATION");
				g = p1.sampleIndividuals(128).genomes;
 	
				// output sampled genomes as VCF
				catn(simID + ": " + sim.cycle + " OUTPUTTING VCF");
				g.outputVCF(filePath = "slim_" + asString(ID) + ".vcf", simplifyNucleotides=F, outputNonnucleotides=T);

				// output when sweep fixed
				catn(simID + ": " + sim.cycle + " OUTPUTTING FIXATION TIME");
				writeFile("fix_time_" + asString(ID) + ".txt", paste(fixTime));

				// output number of failures, if any
				catn(simID + ": " + sim.cycle + " FAILURE COUNT: " + fails);
				// writeFile("fails_" + asString(ID) + ".txt", paste(fails));

				// output harmonic mean of population size
				catn(simID + ": " + sim.cycle + " HARMONIC MEAN Ne: " + fixTime/nx);

				catn(simID + ": " + sim.cycle + " SIMULATION FINISHED! :)");
				sim.simulationFinished();
			}

			// increment tracker of generations post-fixation
			fixTracker = fixTracker + 1;
		}

		else {
			if (sim.cycle > Z) {
				fails = fails + 1; // increment fail counter
				catn(simID + ": " + sim.cycle + " - SWEEP LOST - RESTARTING - FAILS: " + fails);

				// go back to tick before sweep introduced
				sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");

				// start a newly seeded run
				setSeed(rdunif(1, 0, asInteger(2^62) - 1));

				// reassign endBurn-in value
				defineGlobal("endBurn", sim.cycle);

				// reset population size tracker
				defineGlobal("nx", 0);

				catn(simID + ": " + sim.cycle + " NEW SEED: " + getSeed());

				// re-register frequency checks for next cycle
				community.rescheduleScriptBlock(s2, start=endBurn + 1, end=endBurn + 1000000);
				community.rescheduleScriptBlock(s3, start=endBurn + 1, end=endBurn + 1000000);
				community.rescheduleScriptBlock(s5, start=endBurn + 1, end=endBurn + 1000000);
			}
		}
	}
}
